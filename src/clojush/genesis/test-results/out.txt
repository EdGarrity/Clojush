;; Connected to nREPL server - nrepl://localhost:60676
;; CIDER 0.18.0 (Saigon), nREPL 0.2.13
;; Clojure 1.8.0, Java 1.8.0_172
;;     Docs: (doc function-name)
;;           (find-doc part-of-name)
;;   Source: (source function-name)
;;  Javadoc: (javadoc java-object-or-class)
;;     Exit: <C-c C-q>
;;  Results: Stored in vars *1, *2, *3, an exception in *e;
;; ======================================================================
;; If you’re new to CIDER it is highly recommended to go through its
;; manual first. Type <M-x cider-view-manual> to view it.
;; In case you’re seeing any warnings you should consult the manual’s
;; "Troubleshooting" section.
;;
;; Here are few tips to get you started:
;;
;; * Press <C-h m> to see a list of the keybindings available (this
;;   will work in every Emacs buffer)
;; * Press <,> to quickly invoke some REPL command
;; * Press <C-c C-z> to switch between the REPL and a Clojure file
;; * Press <M-.> to jump to the source of something (e.g. a var, a
;;   Java method)
;; * Press <C-c C-d C-d> to view the documentation for something (e.g.
;;   a var, a Java method)
;; * Enable ‘eldoc-mode’ to display function & method signatures in the minibuffer.
;; * Print CIDER’s refcard and keep it close to your keyboard.
;;
;; CIDER is super customizable - try <M-x customize-group cider> to
;; get a feel for this. If you’re thirsty for knowledge you should try
;; <M-x cider-drink-a-sip>.
;;
;; If you think you’ve encountered a bug (or have some suggestions for
;; improvements) use <M-x cider-report-bug> to report it.
;;
;; Above all else - don’t panic! In case of an emergency - procure
;; some (hard) cider and enjoy it responsibly!
;;
;; You can remove this message with the <M-x cider-repl-clear-help-banner> command.
;; You can disable it from appearing on start by setting
;; ‘cider-repl-display-help-banner’ to nil.
;; ======================================================================
clojush.core> (-main 'clojush.genesis.genesis)
Command line args: clojush.genesis.genesis
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 100
alternation-rate = 0.1
atom-generators = (code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup ...)
csv-columns = [:generation :location :parent-uuids :genetic-operators :push-program-size :plush-genome-size :push-program :plush-genome :total-error :test-case-errors]
csv-log-filename = src/clojush/genesis/test-results/log.csv
edn-additional-keys = [:generation :location :push-program-size :plush-genome-size]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = src/clojush/genesis/test-results/log.edn
epigenetic-markers = []
error-function = #function[clojush.genesis.genesis/fn--12978]
error-threshold = 0.01
genetic-operator-probabilities = {:alternation 0.5, :uniform-mutation 0.5}
json-log-filename = src/clojush/genesis/test-results/log.json
json-log-program-strings = true
log-fitnesses-for-all-cases = true
max-generations = 3
parent-selection = :epsilon-lexicase
population-size = 10
print-csv-logs = true
print-edn-logs = true
print-json-logs = true
uniform-mutation-constant-tweak-rate = 0.8
uniform-mutation-float-gaussian-standard-deviation = 0.1
uniform-mutation-rate = 0.1
use-single-thread = false
######################################
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop ...}
Starting PushGP run.
Clojush version = version number unavailable
Hash of last Git commit = unavailable
GitHub link = unavailable
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 100
alternation-rate = 0.1
atom-generators = (code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup ...)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :parent-uuids :genetic-operators :push-program-size :plush-genome-size :push-program :plush-genome :total-error :test-case-errors]
csv-log-filename = src/clojush/genesis/test-results/log.csv
decimation-ratio = 1
decimation-tournament-size = 2
edn-additional-keys = [:generation :location :push-program-size :plush-genome-size]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = src/clojush/genesis/test-results/log.edn
epigenetic-markers = []
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-function = #function[clojush.genesis.genesis/fn--12978]
error-threshold = 0.01
evalpush-limit = 150
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 1000
genetic-operator-probabilities = {:alternation 0.5, :uniform-mutation 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = src/clojush/genesis/test-results/log.json
json-log-program-strings = true
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = true
maintain-ancestors = false
max-error = 1000
max-generations = 3
max-genome-size-in-initial-program = 50
max-point-evaluations = 1.0E101
max-points = 200
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :epsilon-lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 10
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = true
print-edn-logs = true
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = true
print-selection-counts = false
print-timings = false
problem-specific-initial-report = #function[clojush.pushgp.report/default-problem-specific-initial-report]
problem-specific-report = #function[clojush.pushgp.report/default-problem-specific-report]
random-screen = false
random-seed = -74 -105 94 -65 -88 115 4 -26 -112 18 67 -68 -82 125 111 51
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 100
return-simplified-on-failure = false
reuse-errors = true
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.8
uniform-mutation-float-gaussian-standard-deviation = 0.1
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.1
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Epsilons for epsilon lexicase: (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 ...)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction 633, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction 2227, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction -2555, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction -3651, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction -2585, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction -1135, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction -457, :close 1} {:instruction vector_integer_stackdepth} {:instruction char_rot} {:instruction string_split} {:instruction vector_string_eq} {:instruction 61} {:instruction gtm_read_instruction} {:instruction string_replacefirst} {:instruction gtm_read_instruction} {:instruction gtm_read_close} {:instruction zip_append_child_fromexec} {:instruction vector_float_pop} {:instruction genome_yankdup} {:instruction genome_toggle_silent} {:instruction exec_shove} {:instruction float_stackdepth} {:instruction genome_uniform_deletion} {:instruction vector_float_reverse} {:instruction string_replacefirstchar} {:instruction code_fromboolean} {:instruction return_float_pop} {:instruction integer_fromchar} {:instruction code_nthcdr} {:instruction float_empty} {:instruction integer_swap} {:instruction vector_boolean_shove} {:instruction print_vector_integer} {:instruction vector_integer_yank} {:instruction vector_integer_concat} {:instruction vector_string_length} {:instruction code_noop} {:instruction zip_insert_child_fromexec} {:instruction integer_tag_string_instruction} {:instruction boolean_dup} {:instruction zip_insert_child_fromcode} {:instruction vector_float_pop} {:instruction exec_flush})
Lexicase best program: ((float_fromdatatable 633) (float_fromdatatable 2227) (float_fromdatatable -2555) (float_fromdatatable -3651) (float_fromdatatable -2585) (float_fromdatatable -1135) (float_fromdatatable -457) vector_integer_stackdepth char_rot string_split vector_string_eq 61 gtm_read_instruction string_replacefirst gtm_read_instruction gtm_read_close zip_append_child_fromexec (vector_float_pop genome_yankdup genome_toggle_silent exec_shove (float_stackdepth genome_uniform_deletion vector_float_reverse string_replacefirstchar code_fromboolean return_float_pop integer_fromchar code_nthcdr float_empty integer_swap vector_boolean_shove print_vector_integer vector_integer_yank vector_integer_concat vector_string_length code_noop zip_insert_child_fromexec (integer_tag_string_instruction boolean_dup zip_insert_child_fromcode vector_float_pop exec_flush))))
Lexicase best partial simplification: ()
Lexicase best errors
Lexicase best number of elite cases: 1520
Lexicase best total error: 1520000000000000
Lexicase best mean error: 1.0E12
Lexicase best size: 61
Percent parens: 0.180
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction 633, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction 2227, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction -2555, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction -3651, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction -2585, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction -1135, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction -457, :close 1} {:instruction vector_integer_stackdepth} {:instruction char_rot} {:instruction string_split} {:instruction vector_string_eq} {:instruction 61} {:instruction gtm_read_instruction} {:instruction string_replacefirst} {:instruction gtm_read_instruction} {:instruction gtm_read_close} {:instruction zip_append_child_fromexec} {:instruction vector_float_pop} {:instruction genome_yankdup} {:instruction genome_toggle_silent} {:instruction exec_shove} {:instruction float_stackdepth} {:instruction genome_uniform_deletion} {:instruction vector_float_reverse} {:instruction string_replacefirstchar} {:instruction code_fromboolean} {:instruction return_float_pop} {:instruction integer_fromchar} {:instruction code_nthcdr} {:instruction float_empty} {:instruction integer_swap} {:instruction vector_boolean_shove} {:instruction print_vector_integer} {:instruction vector_integer_yank} {:instruction vector_integer_concat} {:instruction vector_string_length} {:instruction code_noop} {:instruction zip_insert_child_fromexec} {:instruction integer_tag_string_instruction} {:instruction boolean_dup} {:instruction zip_insert_child_fromcode} {:instruction vector_float_pop} {:instruction exec_flush})
Zero cases best program: ((float_fromdatatable 633) (float_fromdatatable 2227) (float_fromdatatable -2555) (float_fromdatatable -3651) (float_fromdatatable -2585) (float_fromdatatable -1135) (float_fromdatatable -457) vector_integer_stackdepth char_rot string_split vector_string_eq 61 gtm_read_instruction string_replacefirst gtm_read_instruction gtm_read_close zip_append_child_fromexec (vector_float_pop genome_yankdup genome_toggle_silent exec_shove (float_stackdepth genome_uniform_deletion vector_float_reverse string_replacefirstchar code_fromboolean return_float_pop integer_fromchar code_nthcdr float_empty integer_swap vector_boolean_shove print_vector_integer vector_integer_yank vector_integer_concat vector_string_length code_noop zip_insert_child_fromexec (integer_tag_string_instruction boolean_dup zip_insert_child_fromcode vector_float_pop exec_flush))))
Zero cases best partial simplification: ()
Zero cases best errors
Zero cases best number of elite cases: 1520
Zero cases best number of zero cases: 0
Zero cases best total error: 1520000000000000
Zero cases best mean error: 1.0E12
Zero cases best size: 61
Percent parens: 0.180
--- Lexicase Population Statistics ---
Count of elite individuals by case: (10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 ...)
Population mean number of elite cases: 1520.00
Count of perfect (error zero) individuals by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ...)
Population mean number of perfect (error zero) cases: 0.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction -1307, :close 1} {:instruction string_stackdepth} {:instruction genome_stackdepth} {:instruction string_yankdup} {:instruction vector_float_nth} {:instruction string_dup_items} {:instruction vector_float_replace} {:instruction vector_integer_flush} {:instruction code_shove} {:instruction vector_integer_rest} {:instruction zip_flush} {:instruction vector_float_nth} {:instruction vector_integer_dup_items} {:instruction boolean_empty})
Best program: ((float_fromdatatable -1307) string_stackdepth genome_stackdepth string_yankdup vector_float_nth string_dup_items vector_float_replace vector_integer_flush code_shove vector_integer_rest zip_flush vector_float_nth vector_integer_dup_items boolean_empty)
Partial simplification: ()
Errors
Total: 1520000000000000
Mean: 1.0E12
Genome size: 16
Size: 17
Percent parens: 0.118
--- Population Statistics ---
Average total errors in population: 1.52E15
Median total errors in population: 1520000000000000
Error averages by case: (1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 ...)
Error minima by case
Average genome size in population (length): 41.3
Average program size in population (points): 45.2
Average percent parens in population: 0.194
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.1
Error (vector) diversity:			 0.1
--- Run Statistics ---
Number of program evaluations used so far: 10
Number of point (instruction) evaluations so far: 145094182
--- Timings ---
Current time: 1537146896653 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Epsilons for epsilon lexicase: (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 ...)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction 621, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction 3859, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction -2011, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction 3813, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction 1389, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction -1023, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction 2079, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction 1763, :close 1} {:instruction noop_open_paren} {:instruction vector_boolean_occurrencesof} {:instruction -213, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction -2507, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction 493, :close 1} {:instruction float_dup_times} {:instruction exec_do*vector_boolean} {:instruction float_mult} {:instruction vector_integer_pop} {:instruction code_fromziproot} {:instruction genome_stackdepth} {:instruction integer_sub} {:instruction vector_integer_yankdup} {:instruction exec_k} {:instruction vector_string_take} {:instruction boolean_fromfloat} {:instruction code_if} {:instruction exec_do*while} {:instruction vector_boolean_swap} {:instruction genome_silence} {:instruction genome_uniform_silence_mutation})
Lexicase best program: ((float_fromdatatable 621) (float_fromdatatable 3859) (float_fromdatatable -2011) (float_fromdatatable 3813) (float_fromdatatable 1389) (float_fromdatatable -1023) (float_fromdatatable 2079) (float_fromdatatable 1763) (vector_boolean_occurrencesof -213) (float_fromdatatable -2507) (float_fromdatatable 493) float_dup_times exec_do*vector_boolean (float_mult vector_integer_pop code_fromziproot genome_stackdepth integer_sub vector_integer_yankdup exec_k (vector_string_take boolean_fromfloat code_if exec_do*while (vector_boolean_swap genome_silence genome_uniform_silence_mutation)) ()))
Lexicase best partial simplification: ()
Lexicase best errors
Lexicase best number of elite cases: 1520
Lexicase best total error: 1520000000000000
Lexicase best mean error: 1.0E12
Lexicase best size: 54
Percent parens: 0.296
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction 621, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction 3859, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction -2011, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction 3813, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction 1389, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction -1023, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction 2079, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction 1763, :close 1} {:instruction noop_open_paren} {:instruction vector_boolean_occurrencesof} {:instruction -213, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction -2507, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction 493, :close 1} {:instruction float_dup_times} {:instruction exec_do*vector_boolean} {:instruction float_mult} {:instruction vector_integer_pop} {:instruction code_fromziproot} {:instruction genome_stackdepth} {:instruction integer_sub} {:instruction vector_integer_yankdup} {:instruction exec_k} {:instruction vector_string_take} {:instruction boolean_fromfloat} {:instruction code_if} {:instruction exec_do*while} {:instruction vector_boolean_swap} {:instruction genome_silence} {:instruction genome_uniform_silence_mutation})
Zero cases best program: ((float_fromdatatable 621) (float_fromdatatable 3859) (float_fromdatatable -2011) (float_fromdatatable 3813) (float_fromdatatable 1389) (float_fromdatatable -1023) (float_fromdatatable 2079) (float_fromdatatable 1763) (vector_boolean_occurrencesof -213) (float_fromdatatable -2507) (float_fromdatatable 493) float_dup_times exec_do*vector_boolean (float_mult vector_integer_pop code_fromziproot genome_stackdepth integer_sub vector_integer_yankdup exec_k (vector_string_take boolean_fromfloat code_if exec_do*while (vector_boolean_swap genome_silence genome_uniform_silence_mutation)) ()))
Zero cases best partial simplification: ()
Zero cases best errors
Zero cases best number of elite cases: 1520
Zero cases best number of zero cases: 0
Zero cases best total error: 1520000000000000
Zero cases best mean error: 1.0E12
Zero cases best size: 54
Percent parens: 0.296
--- Lexicase Population Statistics ---
Count of elite individuals by case: (10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 ...)
Population mean number of elite cases: 1520.00
Count of perfect (error zero) individuals by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ...)
Population mean number of perfect (error zero) cases: 0.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction 3461, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction 847, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction -2359, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction 3445, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction -2987, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction 929, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction -185, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction -2535, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction -1307, :close 1} {:instruction string_stackdepth} {:instruction genome_stackdepth} {:instruction string_yankdup} {:instruction vector_float_nth} {:instruction string_dup_items} {:instruction vector_float_replace} {:instruction vector_integer_flush} {:instruction code_shove} {:instruction vector_integer_rest} {:instruction zip_flush} {:instruction vector_float_nth} {:instruction vector_integer_dup_items} {:instruction boolean_empty})
Best program: ((float_fromdatatable 3461) (float_fromdatatable 847) (float_fromdatatable -2359) (float_fromdatatable 3445) (float_fromdatatable -2987) (float_fromdatatable 929) (float_fromdatatable -185) (float_fromdatatable -2535) (float_fromdatatable -1307) string_stackdepth genome_stackdepth string_yankdup vector_float_nth string_dup_items vector_float_replace vector_integer_flush code_shove vector_integer_rest zip_flush vector_float_nth vector_integer_dup_items boolean_empty)
Partial simplification: ()
Errors: [1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 ...]
Total: 1520000000000000
Mean: 1.0E12
Genome size: 40
Size: 41
Percent parens: 0.244
--- Population Statistics ---
Average total errors in population: 1.52E15
Median total errors in population: 1520000000000000
Error averages by case
Error minima by case: (1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 ...)
Average genome size in population (length): 34.3
Average program size in population (points): 36.2
Average percent parens in population: 0.332
Minimum age in population: 1.0
Maximum age in population: 1.0
Average age in population: 1.0
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.1
Error (vector) diversity:			 0.1
--- Run Statistics ---
Number of program evaluations used so far: 20
Number of point (instruction) evaluations so far: 240069862
--- Timings ---
Current time: 1537154785973 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Epsilons for epsilon lexicase: (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 ...)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction 3031, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction -3761, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction -3267, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction 1287, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction -1685, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction 1721, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction -1351, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction 3461, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction -3973, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction -1297, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction 2673, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction -975, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction -3213, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction 3409, :close 1} {:instruction 34} {:instruction genome_gene_dup} {:instruction zip_stackdepth} {:instruction char_shove} {:instruction genome_uniform_close_mutation} {:instruction genome_genesis} {:instruction exec_do*vector_boolean} {:instruction exec_do*count} {:instruction char_isdigit} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction -3213, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction 2079, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction -3213, :close 1})
Lexicase best program: ((float_fromdatatable 3031) (float_fromdatatable -3761) (float_fromdatatable -3267) (float_fromdatatable 1287) (float_fromdatatable -1685) (float_fromdatatable 1721) (float_fromdatatable -1351) (float_fromdatatable 3461) (float_fromdatatable -3973) (float_fromdatatable -1297) (float_fromdatatable 2673) (float_fromdatatable -975) (float_fromdatatable -3213) (float_fromdatatable 3409) 34 genome_gene_dup zip_stackdepth char_shove genome_uniform_close_mutation genome_genesis exec_do*vector_boolean (exec_do*count (char_isdigit (float_fromdatatable (float_fromdatatable -3213) (float_fromdatatable 2079) (float_fromdatatable (float_fromdatatable -3213))))))
Lexicase best partial simplification: ()
Lexicase best errors
Lexicase best number of elite cases: 1520
Lexicase best total error: 1520000000000000
Lexicase best mean error: 1.0E12
Lexicase best size: 67
Percent parens: 0.328
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction 3031, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction -3761, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction -3267, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction 1287, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction -1685, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction 1721, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction -1351, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction 3461, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction -3973, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction -1297, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction 2673, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction -975, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction -3213, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction 3409, :close 1} {:instruction 34} {:instruction genome_gene_dup} {:instruction zip_stackdepth} {:instruction char_shove} {:instruction genome_uniform_close_mutation} {:instruction genome_genesis} {:instruction exec_do*vector_boolean} {:instruction exec_do*count} {:instruction char_isdigit} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction -3213, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction 2079, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction -3213, :close 1})
Zero cases best program: ((float_fromdatatable 3031) (float_fromdatatable -3761) (float_fromdatatable -3267) (float_fromdatatable 1287) (float_fromdatatable -1685) (float_fromdatatable 1721) (float_fromdatatable -1351) (float_fromdatatable 3461) (float_fromdatatable -3973) (float_fromdatatable -1297) (float_fromdatatable 2673) (float_fromdatatable -975) (float_fromdatatable -3213) (float_fromdatatable 3409) 34 genome_gene_dup zip_stackdepth char_shove genome_uniform_close_mutation genome_genesis exec_do*vector_boolean (exec_do*count (char_isdigit (float_fromdatatable (float_fromdatatable -3213) (float_fromdatatable 2079) (float_fromdatatable (float_fromdatatable -3213))))))
Zero cases best partial simplification: ()
Zero cases best errors: [1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 ...]
Zero cases best number of elite cases: 1520
Zero cases best number of zero cases: 0
Zero cases best total error: 1520000000000000
Zero cases best mean error: 1.0E12
Zero cases best size: 67
Percent parens: 0.328
--- Lexicase Population Statistics ---
Count of elite individuals by case: (10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 ...)
Population mean number of elite cases: 1520.00
Count of perfect (error zero) individuals by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ...)
Population mean number of perfect (error zero) cases: 0.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction 961, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction -1193, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction -2485, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction -1591, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction 2811, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction -2195, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction 3131, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction 223, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction -3189, :close 1})
Best program: ((float_fromdatatable 961) (float_fromdatatable -1193) (float_fromdatatable -2485) (float_fromdatatable -1591) (float_fromdatatable 2811) (float_fromdatatable -2195) (float_fromdatatable 3131) (float_fromdatatable 223) (float_fromdatatable -3189))
Partial simplification: ()
Errors
Total: 1520000000000000
Mean: 1.0E12
Genome size: 27
Size: 28
Percent parens: 0.357
--- Population Statistics ---
Average total errors in population: 1.52E15
Median total errors in population: 1520000000000000
Error averages by case
Error minima by case
Average genome size in population (length): 36.5
Average program size in population (points): 38.0
Average percent parens in population: 0.341
Minimum age in population: 2.0
Maximum age in population: 2.0
Average age in population: 2.0
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.1
Error (vector) diversity:			 0.1
--- Run Statistics ---
Number of program evaluations used so far: 30
Number of point (instruction) evaluations so far: 337362022
--- Timings ---
Current time: 1537162973182 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Epsilons for epsilon lexicase: (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 ...)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction -919, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction -281, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction 91, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction -3333, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction -293, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction -3195, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction -2601, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction 961, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction -1193, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction 4003, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction -1095, :close 1} {:instruction noop_open_paren})
Lexicase best program: ((float_fromdatatable -919) (float_fromdatatable -281) (float_fromdatatable 91) (float_fromdatatable -3333) (float_fromdatatable -293) (float_fromdatatable -3195) (float_fromdatatable -2601) (float_fromdatatable 961) (float_fromdatatable -1193) (float_fromdatatable (float_fromdatatable 4003) (float_fromdatatable -1095) ()))
Lexicase best partial simplification: ()
Lexicase best errors
Lexicase best number of elite cases: 1520
Lexicase best total error: 1520000000000000
Lexicase best mean error: 1.0E12
Lexicase best size: 37
Percent parens: 0.378
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction -919, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction -281, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction 91, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction -3333, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction -293, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction -3195, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction -2601, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction 961, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction -1193, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction 4003, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction -1095, :close 1} {:instruction noop_open_paren})
Zero cases best program: ((float_fromdatatable -919) (float_fromdatatable -281) (float_fromdatatable 91) (float_fromdatatable -3333) (float_fromdatatable -293) (float_fromdatatable -3195) (float_fromdatatable -2601) (float_fromdatatable 961) (float_fromdatatable -1193) (float_fromdatatable (float_fromdatatable 4003) (float_fromdatatable -1095) ()))
Zero cases best partial simplification: ()
Zero cases best errors
Zero cases best number of elite cases: 1520
Zero cases best number of zero cases: 0
Zero cases best total error: 1520000000000000
Zero cases best mean error: 1.0E12
Zero cases best size: 37
Percent parens: 0.378
--- Lexicase Population Statistics ---
Count of elite individuals by case: (10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 ...)
Population mean number of elite cases: 1520.00
Count of perfect (error zero) individuals by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ...)
Population mean number of perfect (error zero) cases: 0.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction -305, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction -2331, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction 2909, :close 1} {:instruction noop_open_paren} {:instruction float_fromdatatable} {:instruction 2163, :close 1})
Best program: ((float_fromdatatable -305) (float_fromdatatable -2331) (float_fromdatatable 2909) (float_fromdatatable 2163))
Partial simplification: ()
Errors
Total: 1520000000000000
Mean: 1.0E12
Genome size: 12
Size: 13
Percent parens: 0.385
--- Population Statistics ---
Average total errors in population: 1.52E15
Median total errors in population: 1520000000000000
Error averages by case: (1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 1.0E12 ...)
Error minima by case: (1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 1000000000000 ...)
Average genome size in population (length): 34.9
Average program size in population (points): 37.2
Average percent parens in population: 0.330
Minimum age in population: 0.0
Maximum age in population: 3.0
Average age in population: 2.4
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.1
Error (vector) diversity:			 0.1
--- Run Statistics ---
Number of program evaluations used so far: 40
Number of point (instruction) evaluations so far: 423843942
--- Timings ---
Current time: 1537170674441 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

FAILURE
nil
Exception updating the ns-cache #error {
 :cause Task clojure.lang.Agent$Action@49558c5 rejected from java.util.concurrent.ThreadPoolExecutor@2e71ada3[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 363]
 :via
 [{:type java.util.concurrent.RejectedExecutionException
   :message Task clojure.lang.Agent$Action@49558c5 rejected from java.util.concurrent.ThreadPoolExecutor@2e71ada3[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 363]
   :at [java.util.concurrent.ThreadPoolExecutor$AbortPolicy rejectedExecution ThreadPoolExecutor.java 2063]}]
 :trace
 [[java.util.concurrent.ThreadPoolExecutor$AbortPolicy rejectedExecution ThreadPoolExecutor.java 2063]
  [java.util.concurrent.ThreadPoolExecutor reject ThreadPoolExecutor.java 830]
  [java.util.concurrent.ThreadPoolExecutor execute ThreadPoolExecutor.java 1379]
  [clojure.lang.Agent$Action execute Agent.java 90]
  [clojure.lang.Agent enqueue Agent.java 268]
  [clojure.lang.Agent dispatchAction Agent.java
 255]
  [clojure.lang.Agent dispatch Agent.java 241]
  [clojure.core$send_via invokeStatic core.clj 2017]
  [clojure.core$send_via doInvoke core.clj 2009]
  [clojure.lang.RestFn applyTo RestFn.java 146]
  [clojure.core$apply invokeStatic core.clj 652]
  [clojure.core$send invokeStatic core.clj 2028]
  [clojure.core$send doInvoke core.clj 2019]
  [clojure.lang.RestFn invoke RestFn.java 490]
  [cider.nrepl.middleware.track_state$make_transport$reify__12734 send track_state.clj 226]
  [cider.nrepl.middleware.content_type$content_type_transport$reify__13107 send content_type.clj 129]
  [clojure.tools.nrepl.middleware.interruptible_eval$interruptible_eval$fn__8221$fn__8224 invoke interruptible_eval.clj 223]
  [clojure.tools.nrepl.middleware.interruptible_eval$run_next$fn__8216 invoke interruptible_eval.clj 190]
  [clojure.lang.AFn run AFn.java 22]
  [java.util.concurrent.ThreadPoolExecutor runWorker ThreadPoolExecutor.java 1149]
  [java.util.concurrent.ThreadPoolExecutor$Worker run ThreadPoolExecutor.java 624]
  [
java.lang.Thread run Thread.java 748]]}
clojush.core> 
